package org.hxzon.asn1.osipresentation;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import org.hxzon.asn1.Asn1Utils;
import org.hxzon.asn1.BerChoice;
import org.hxzon.asn1.mms.MmsPduParser;

import com.chaosinmotion.asn1.BerInputStream;
import com.chaosinmotion.asn1.BerNode;
import com.chaosinmotion.asn1.BerParser;
import com.chaosinmotion.asn1.BerSequence;
import com.chaosinmotion.asn1.Tag;

public class OsiPresentationParser extends BerParser {

	public static final int State_Presentation = 1;
	public static final int State_UserData = 2;
	public static final int State_SeqOfPdvList = 3;
	public static final int State_PdvList = 4;
	public static final int State_PresentationDataValues = 5;
	public static final int State_Mms = 6;

	@Override
	public BerNode create(int tag, BerInputStream stream, int state) {
		switch (state) {
		case State_Start: {
			switch (tag) {
			case Tag.APPLICATION | 1:
				return new BerSequence().init("iso 8823 osi presentation", "iso 8823 osi presentation", tag, stream, State_Presentation, this);
			default:
				return Asn1Utils.createUnknownTagBerNode(tag, stream);
			}
		}
		case State_Presentation: {
			switch (tag) {
			default:
//				return new UserData().init(tag, stream);
				return new BerChoice().init("user data", "user data", tag, stream, State_UserData, this);
			}
		}
		case State_UserData: {
			switch (tag) {
			case Tag.APPLICATION | 0:
				return Asn1Utils.createBerOctetString("SimplyEncodedData", "SimplyEncodedData", tag, stream);
			case Tag.UNIVERSAL | 16://only one
//				return new PdvList().init(tag, stream);
				return new BerSequence().init("item", "item", tag, stream, State_PdvList, this);
			case Tag.APPLICATION | 1:
//				return Asn1Utils.createBerSequenceOf("fully encoded data", "fully encoded data", tag, stream, PdvList.class);
				return new BerSequence().init("fully encoded data", "fully encoded data", tag, stream, State_SeqOfPdvList, this);
			default:
				return Asn1Utils.createUnknownTagBerNode(tag, stream);
			}
		}
		case State_SeqOfPdvList: {
			return new BerSequence().init("fully encoded data", "fully encoded data", tag, stream, State_PdvList, this);
		}
		case State_PdvList: {
			switch (tag) {
			case Tag.UNIVERSAL | 2:
//					return Asn1Utils.createBerInteger("presentation-context-identifier", tag, stream);
				return Asn1Utils.createBerInteger("PresentationContextIdentifier", "PresentationContextIdentifier", tag, stream);
			default:
//				return new PresentationDataValues().init(tag, stream);
				return new BerChoice().init("PresentationDataValues", "PresentationDataValues", tag, stream, State_PresentationDataValues, this);
			}
		}
		case State_PresentationDataValues: {
			switch (tag) {
			case Tag.CONTEXT | 0:
//				return Asn1Utils.createBerOctetString("single-ASN1-type", tag, stream);
//				return new SingleAsn1Type(tag, stream);
//				return Asn1Utils.createBerSequenceOf("single-ASN1-type", "single-ASN1-type", tag, stream, MmsPdu.class);
				return new BerSequence().init("single-ASN1-type", "single-ASN1-type", tag, stream, State_Mms, this);
			case Tag.CONTEXT | 1:
				return Asn1Utils.createBerOctetString("octet aligned", "octet aligned", tag, stream);
			case Tag.CONTEXT | 2:
				return Asn1Utils.createBerBitString("arbitrary", "arbitrary", tag, stream);
			default:
				return Asn1Utils.createUnknownTagBerNode(tag, stream);
			}
		}
		case State_Mms: {
//			return new MmsPduParser().init("mms", "mms", tag, stream);
			return MmsPduParser.mmsParser.create(tag, stream, State_Start);
		}
		default:
			throw new RuntimeException("unknow state");
		}
	}

	public BerNode parsePresentation(byte[] data, int offset) {
		ByteArrayInputStream inStream = new ByteArrayInputStream(data);
		BerInputStream in = new BerInputStream(inStream);
		in.setTagOffset(offset);
		try {
			return super.readPacket(in);
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

}
